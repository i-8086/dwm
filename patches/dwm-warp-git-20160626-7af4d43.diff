diff --git a/config.def.h b/config.def.h
index b2bc9bd..0329e1f 100644
--- a/config.def.h
+++ b/config.def.h
@@ -42,5 +42,6 @@
 /* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const float mfact     = 0.50; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
 static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static int warpcursor = 1;	/* 1 means warp cursor to center of focused window */
 static int attachbelow = 1;    /* 1 means attach after the currently active window */
@@ -88,4 +88,6 @@ static Key keys[] = {
+	{ MODKEY|ShiftMask,             XK_Tab,    toggleAttachBelow, {0} },
+	{ MODKEY,                       XK_Tab,    toggleWarpCursor, {0} },
 };
 
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
diff --git a/dwm.c b/dwm.c
index b2bc9bd..0329e1f 100644
--- a/dwm.c
+++ b/dwm.c
@@ -228,6 +228,8 @@ static void updatewindowtype(Client *c);
 static void updatetitle(Client *c);
 static void updatewindowtype(Client *c);
 static void updatewmhints(Client *c);
 static void view(const Arg *arg);
+static void warp(const Client *c);
+static void toggleWarpCursor();
 static Client *wintoclient(Window w);
 static Monitor *wintomon(Window w);
@@ -842,5 +843,11 @@ focusmon(const Arg *arg)
 	selmon = m;
 	focus(NULL);
+	warp(selmon->sel);
 }
+
+void toggleWarpCursor()
+{
+	warpcursor = !warpcursor;
+}
 
 void
@@ -1387,6 +1389,8 @@ restack(Monitor *m)
 	}
 	XSync(dpy, False);
 	while (XCheckMaskEvent(dpy, EnterWindowMask, &ev));
+	if (warpcursor && m == selmon && (m->tagset[m->seltags] & m->sel->tags) && selmon->lt[selmon->sellt] != &layouts[2])
+		warp(m->sel);
 }
 
 void
@@ -2039,6 +2043,28 @@ view(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+warp(const Client *c)
+{
+	int x, y;
+
+	if (!c) {
+		XWarpPointer(dpy, None, root, 0, 0, 0, 0, selmon->wx + selmon->ww/2, selmon->wy + selmon->wh/2);
+		return;
+	}
+
+	if (!getrootptr(&x, &y) ||
+	    (x > c->x - c->bw &&
+	     y > c->y - c->bw &&
+	     x < c->x + c->w + c->bw*2 &&
+	     y < c->y + c->h + c->bw*2) ||
+	    (y > c->mon->by && y < c->mon->by + bh) ||
+	    (c->mon->topbar && !y))
+		return;
+
+	XWarpPointer(dpy, None, c->win, 0, 0, 0, 0, c->w / 2, c->h / 2);
+}
+
 Client *
 wintoclient(Window w)
 {
